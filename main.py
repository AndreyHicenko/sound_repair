from aiogram import Bot, Dispatcher, types
import asyncio
from config import TOKEN
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import logging
from keyboards.keyboard_start import *
from keyboards.keyboard_servises import *
from keyboards.keyboard_kontakt import *
from keyboards.keyboard_price_lists import *
from keyboards.keyboard_admin import *
from datebase.query_datebase import *
from keyboards.keyboard_photo_example_works import *
from keyboards.keyboard_sign_up import *

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


class Mydialog(StatesGroup):
    state_sign_up_mobile_number_car_service = State()
    state_sign_up_name_car_service = State()
    otvet = State()
    state_sign_up_name = State()
    state_sign_up_mobile_number = State()


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    # –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –Ω–∞—á–∞–ª–æ
    admin_list_id = []
    for i in range(len((await search_admin_users()))):
        admin_list_id.append(int((await (search_admin_users()))[i]['id_admin_users']))
    if message.from_user.id in admin_list_id:
        await message.answer("<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</b> –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Å–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞<b>"
                             " –±–æ—Ç–∞ —Å—Ç—É–¥–∏–∏ –∞–≤—Ç–æ–∑–≤—É–∫–∞ SOUND REPAIR.</b>",
                             parse_mode="HTML", reply_markup=kb_admin)
    else:
        list_users_id = [int(s['id_users']) for s in (await search_users_id())]
        if message.from_user.id not in list_users_id:
            (await add_users_id(message.from_user.id))
        await message.answer("<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</b> –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç<b>"
                             " –±–æ—Ç —Å—Ç—É–¥–∏–∏ –∞–≤—Ç–æ–∑–≤—É–∫–∞ SOUND REPAIR.</b>",
                             parse_mode="HTML", reply_markup=kb_start)


# –∫–æ–Ω—Å–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.callback_query_handler(text='callback_admin_mailing')
async def callback_admin_mailing(callback: types.callback_query):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=kb_admin_mailing_only_back)
    await Mydialog.otvet.set()


@dp.callback_query_handler(text='callback_admin_mail_back', state=Mydialog.otvet)
async def callback_admin_mailing_back_only(callback: types.callback_query, state: FSMContext):
    await state.finish()
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    admin_list_id = []
    for i in range(len((await search_admin_users()))):
        admin_list_id.append(int((await (search_admin_users()))[i]['id_admin_users']))
    if callback.from_user.id in admin_list_id:
        await bot.send_message(callback.from_user.id, "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–Ω—Å–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞<b>"
                                                      " –±–æ—Ç–∞ —Å—Ç—É–¥–∏–∏ –∞–≤—Ç–æ–∑–≤—É–∫–∞ SOUND REPAIR.</b>",
                               parse_mode="HTML", reply_markup=kb_admin)


@dp.callback_query_handler(text='callback_admin_mail_back_to_console')
async def callback_admin_mailing_back(callback: types.callback_query):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    admin_list_id = []
    for i in range(len((await search_admin_users()))):
        admin_list_id.append(int((await (search_admin_users()))[i]['id_admin_users']))
    if callback.from_user.id in admin_list_id:
        await bot.send_message(callback.from_user.id, "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–Ω—Å–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞<b>"
                                                      " –±–æ—Ç–∞ —Å—Ç—É–¥–∏–∏ –∞–≤—Ç–æ–∑–≤—É–∫–∞ SOUND REPAIR.</b>",
                               parse_mode="HTML", reply_markup=kb_admin)


@dp.callback_query_handler(text='callback_admin_mail_message_accept', state=Mydialog.otvet)
async def callback_admin_mailing_accept(callback: types.callback_query, state: FSMContext):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    admin_list_id = []
    for i in range(len((await search_admin_users()))):
        admin_list_id.append(int((await (search_admin_users()))[i]['id_admin_users']))
    for s in (await search_users_id()):
        if int(s['id_users']) not in admin_list_id:
            await bot.send_message(int(s['id_users']), (await get_admin_lost_message(callback.from_user.id)))
    try:
        await bot.send_message(callback.from_user.id, "–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ",
                               reply_markup=kb_admin_mailing_send_back)
        await state.finish()
    except Exception:
        await bot.send_message(callback.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", reply_markup=kb_admin_mailing_send_back)
        await state.finish()


@dp.message_handler(state=Mydialog.otvet)
async def process_message(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
        user_message = data['text']
        (await update_lost_message_admin(user_message, message.from_user.id))
        await Mydialog.otvet.set()
        await message.answer(f"‚ùì <b>–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º?</b>\n\n\n"
                             f"{user_message}", parse_mode='HTML', reply_markup=kb_admin_mailing)


@dp.callback_query_handler(text='callback_admin_mail_message_cancel', state=Mydialog.otvet)
async def callback_admin_mail_message_cancel(callback: types.callback_query, state: FSMContext):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, "–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                           parse_mode="HTML", reply_markup=kb_admin_mailing_send_back)
    await state.finish()


# —Ä—è–¥–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
@dp.callback_query_handler(text='kb_our_services')
async def our_services_callback(callback: types.callback_query):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, "<b>–ù–∞—à–∏ —É—Å–ª—É–≥–∏</b>\n \n"
                                                  "üëª–ü—Ä–æ–¥–∞–∂–∞ –∞–≤—Ç–æ–∑–≤—É–∫–∞ –ø–æ –Ω–∏–∑–∫–∏–º —Ü–µ–Ω–∞–º;\n \n"
                                                  "üò±–ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –º–µ—Å—Ç–µ –æ—Ç –æ—Ñ.—Ü–µ–Ω—Ç—Ä–∞;\n \n"
                                                  "üçí–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–∑–≤—É–∫–∞ –∏ –∞–≤—Ç–æ—ç–ª–µ–∫—Ç—Ä–∏–∫–∏ –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏;\n \n"
                                                  "üîß–†–µ–º–æ–Ω—Ç –¥–∏–Ω–∞–º–∏–∫–æ–≤ –∏ –∑–≤—É–∫–æ—É—Å–∏–ª–∏–≤–∞—é—â–µ–π –∞–ø–ø–∞—Ä–∞—Ç—É—Ä—ã \n \n"
                                                  "üëç–ù–∞ –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —á–µ–∫–∏, –±—É–º–∞–≥–∏, –∞–∫—Ç –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç.",
                           parse_mode="HTML", reply_markup=kb_servise)


# –∫–æ–ª–±–µ–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–∞–π—Å –ª–∏—Å—Ç–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç
@dp.callback_query_handler(text='callback_price_repair')
async def price_repair_callback(callback: types.callback_query):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, '–ü—Ä–∞–π—Å –ª–∏—Å—Ç –Ω–∞ —Ä–µ–º–æ–Ω—Ç –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
                           reply_markup=kb_price_repair)


@dp.callback_query_handler(text='kontakt')
async def kontakt_callback(callback: types.callback_query):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, "<b>üè¢ –ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É:</b> \n"
                                                  "–ü–ª–æ—â–∞–¥—å –û–∫—Ç—è–±—Ä—å—Å–∫–∞—è 76–ì (–¢–¶ –ê–≤—Ç–æ–¥–æ–º 2–π —ç—Ç–∞–∂), –†–æ—Å—Å–æ—à—å\n"
                                                  "<b>üïê –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –≥—Ä–∞—Ñ–∏–∫—É:</b>\n"
                                                  "<b>–ü–Ω</b> 10:00 - 18:00\n"
                                                  "<b>–í—Ç</b> 10:00 - 18:00\n"
                                                  "<b>–°—Ä</b> 10:00 - 18:00\n"
                                                  "<b>–ß—Ç</b> 10:00 - 18:00\n"
                                                  "<b>–ü—Ç</b> 10:00 - 18:00\n"
                                                  "<b>–°–±</b> 10:00 - 18:00\n"
                                                  "<b>–í—Å</b> 10:00 - 18:00",
                           parse_mode="HTML", reply_markup=kb_kontakt)


@dp.callback_query_handler(text='kb_price_repair_dinamic')
async def kb_price_repair_dinamic(callback: types.callback_query):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    price_dinamic = (await search_db_price_din())
    await bot.send_message(callback.from_user.id,
                           f"‚ùó <b>–í—Å–µ —Ü–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã —Å –∑–∞–ø—á–∞—Å—Ç—å—é</b> \n\n"
                           f"üíµ{price_dinamic[0]['type_work']} - <b>–æ—Ç"
                           f" {price_dinamic[0]['price']} –†—É–±. </b>\n\n"
                           f"üíµ{price_dinamic[1]['type_work']} - <b>–æ—Ç"
                           f" {price_dinamic[1]['price']} –†—É–±. </b>\n\n"
                           f"üíµ{price_dinamic[2]['type_work']} - <b>–æ—Ç"
                           f" {price_dinamic[2]['price']} –†—É–±. </b>\n\n"
                           f"üíµ{price_dinamic[3]['type_work']} - <b>–æ—Ç"
                           f" {price_dinamic[3]['price']} –†—É–±. </b>\n\n"
                           f"üíµ{price_dinamic[4]['type_work']} - <b>–æ—Ç"
                           f" {price_dinamic[4]['price']} –†—É–±. </b>\n\n\n"
                           f"üíµ{price_dinamic[5]['type_work']} - <b>–æ—Ç"
                           f" {price_dinamic[5]['price']} –†—É–±. </b>\n\n"
                           f"üíµ{price_dinamic[6]['type_work']} - <b>–æ—Ç"
                           f" {price_dinamic[6]['price']} –†—É–±. </b>\n\n"
                           f"üíµ{price_dinamic[7]['type_work']} - <b>–æ—Ç"
                           f" {price_dinamic[7]['price']} –†—É–±. </b>\n\n"
                           f"üíµ{price_dinamic[8]['type_work']} - <b>–æ—Ç"
                           f" {price_dinamic[8]['price']} –†—É–±. </b>\n\n"
                           f"üíµ{price_dinamic[9]['type_work']} - <b>–æ—Ç"
                           f" {price_dinamic[9]['price']} –†—É–±. </b>\n\n"
                           f"üíµ{price_dinamic[10]['type_work']} - <b>–æ—Ç"
                           f" {price_dinamic[10]['price']} –†—É–±. </b>\n\n"
                           , parse_mode="HTML",
                           reply_markup=kb_price_repair_din_markup)


@dp.callback_query_handler(text='kb_price_repair_sub')
async def kb_price_repair_subwoofer(callback: types.callback_query):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    price_subwoofer = (await search_db_price_sub())
    await bot.send_message(callback.from_user.id,
                           f"‚ùó <b>–¶–µ–Ω–∞ —Ä–µ–º–æ–Ω—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –±–µ–∑ –∑–∞–ø—á–∞—Å—Ç–∏</b> \n\n"
                           f"üíµ{price_subwoofer[0]['type_work']}\n- <b>–æ—Ç "
                           f"{price_subwoofer[0]['price']} –†—É–±.</b> \n\n"
                           f"üíµ{price_subwoofer[1]['type_work']}\n- <b>–æ—Ç "
                           f"{price_subwoofer[1]['price']} –†—É–±.</b> \n\n"
                           f"üíµ{price_subwoofer[2]['type_work']}\n- <b>–æ—Ç "
                           f"{price_subwoofer[2]['price']} –†—É–±.</b> \n\n"
                           f"üíµ{price_subwoofer[3]['type_work']}\n- <b>–æ—Ç "
                           f"{price_subwoofer[3]['price']} –†—É–±.</b> \n\n"
                           f"üíµ{price_subwoofer[4]['type_work']}\n- <b>–æ—Ç "
                           f"{price_subwoofer[4]['price']} –†—É–±.</b> \n\n"
                           f"üíµ{price_subwoofer[5]['type_work']}\n- <b>–æ—Ç "
                           f"{price_subwoofer[5]['price']} –†—É–±.</b> \n\n"
                           f"‚ùó <b>–¶–µ–Ω—É –∑–∞–ø—á–∞—Å—Ç–µ–π —É—Ç–æ—á–Ω—è–µ—Ç–µ —É –º–∞—Å—Ç–µ—Ä–∞ –ª–∏—á–Ω–æ –∏–ª–∏ –Ω–∞ —Å–∞–π—Ç–µ –†–µ–º–¥–∏–Ω–∞–º–∏–∫.—Ä—É</b>",
                           parse_mode='HTML',
                           reply_markup=kb_price_repair_din_markup
                           )


@dp.callback_query_handler(text='kb_price_repair_amplifier')
async def kb_price_repair_subwoofer(callback: types.callback_query):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    price_amplifier = (await search_db_price_amplifier())
    await bot.send_message(callback.from_user.id,
                           f"‚ùó <b>–í—Å–µ —Ü–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã —Å –∑–∞–ø—á–∞—Å—Ç—å—é</b> \n\n"
                           f"üíµ{price_amplifier[0]['type_work']}\n - <b>–æ—Ç"
                           f" {price_amplifier[0]['price']} –†—É–±. </b>\n\n"
                           f"üíµ{price_amplifier[1]['type_work']}\n - <b>–æ—Ç"
                           f" {price_amplifier[1]['price']} –†—É–±. </b>\n\n"
                           f"üíµ{price_amplifier[2]['type_work']}\n - <b>–æ—Ç"
                           f" {price_amplifier[2]['price']} –†—É–±. </b>\n\n"
                           f"üíµ{price_amplifier[3]['type_work']}\n - <b>–æ—Ç"
                           f" {price_amplifier[3]['price']} –†—É–±. </b>\n\n"
                           f"üíµ{price_amplifier[4]['type_work']}\n - <b>–æ—Ç"
                           f" {price_amplifier[4]['price']} –†—É–±. </b>\n\n\n"
                           f"üíµ{price_amplifier[5]['type_work']}\n - <b>–æ—Ç"
                           f" {price_amplifier[5]['price']} –†—É–±. </b>\n\n"
                           f"üíµ{price_amplifier[6]['type_work']}\n - <b>–æ—Ç"
                           f" {price_amplifier[6]['price']} –†—É–±. </b>\n\n"
                           f"üíµ{price_amplifier[7]['type_work']}\n - <b>–æ—Ç"
                           f" {price_amplifier[7]['price']} –†—É–±. </b>\n\n"
                           f"üíµ{price_amplifier[8]['type_work']}\n - <b>–æ—Ç"
                           f" {price_amplifier[8]['price']} –†—É–±. </b>\n\n"
                           f"üíµ{price_amplifier[9]['type_work']}\n - <b>–æ—Ç"
                           f" {price_amplifier[9]['price']} –†—É–±. </b>\n\n",
                           parse_mode="HTML",
                           reply_markup=kb_price_repair_din_markup)


@dp.callback_query_handler(text='callback_example_works')
async def callback_example_works(callback: types.callback_query):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    with open(f'static/img/img_example_works/{(await get_users_lost_photo(callback.from_user.id))}.jpeg', 'rb') \
            as photo:
        await bot.send_photo(chat_id=callback.from_user.id, photo=photo, reply_markup=kb_photo_example_works)


@dp.callback_query_handler(text='callback_photo_back')
async def callback_photo_back(callback: types.callback_query):
    if (await get_users_lost_photo(callback.from_user.id)) > 1:
        await bot.delete_message(callback.from_user.id, callback.message.message_id)
        (await update_lost_photo_users_down(callback.from_user.id))
        with open(f'static/img/img_example_works/{(await get_users_lost_photo(callback.from_user.id))}.jpeg', 'rb') \
                as photo:
            await bot.send_photo(chat_id=callback.from_user.id, photo=photo, reply_markup=kb_photo_example_works)


@dp.callback_query_handler(text='callback_photo_forward')
async def callback_photo_back(callback: types.callback_query):
    if (await get_users_lost_photo(callback.from_user.id)) <= 32:
        await bot.delete_message(callback.from_user.id, callback.message.message_id)
        (await update_lost_photo_users_up(callback.from_user.id))
        with open(f'static/img/img_example_works/{(await get_users_lost_photo(callback.from_user.id))}.jpeg', 'rb') \
                as photo:
            await bot.send_photo(chat_id=callback.from_user.id, photo=photo, reply_markup=kb_photo_example_works)


# –∑–∞–ø–∏—Å—å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∞–≤—Ç–æ–∑–≤—É–∫–∞ //////////////////////////////////////////////////////////////////////////////////////
@dp.callback_query_handler(text='callback_sign_up_btn')
async def callback_sign_up_btn(callback: types.callback_query):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, '<b>–í—ã–±–µ—Ä–µ—Ç–µ –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è</b>', parse_mode='HTML',
                           reply_markup=kb_sign_up)


@dp.callback_query_handler(text='callback_installation')
async def callback_installation(callback: types.callback_query):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, '<b>–£–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è</b>', parse_mode='HTML',
                           reply_markup=kb_sign_up_only_back)
    await Mydialog.state_sign_up_name.set()


# 1
@dp.message_handler(state=Mydialog.state_sign_up_name)
async def callback_installation_state(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
        user_message = data['text']
        (await update_name_users(user_message, message.from_user.id))
        await Mydialog.state_sign_up_name.set()
        await bot.send_message(message.from_user.id, f"<b>–í–∞—Å –∑–æ–≤—É—Ç</b> "
                                                     f"{user_message}?", parse_mode='HTML',
                               reply_markup=kb_sign_up_name)


# 2
@dp.callback_query_handler(text='callback_installation_no', state=Mydialog.state_sign_up_name)
async def callback_installation_no(callback: types.callback_query, state: FSMContext):
    await state.finish()
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, '<b>–£–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è</b>', parse_mode='HTML',
                           reply_markup=kb_sign_up_only_back)
    await Mydialog.state_sign_up_name.set()


@dp.callback_query_handler(text='callback_sign_up_back', state=Mydialog.state_sign_up_name)
async def callback_sign_up_back(callback: types.callback_query, state: FSMContext):
    await state.finish()
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, '<b>–í—ã–±–µ—Ä–µ—Ç–µ –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è</b>', parse_mode='HTML',
                           reply_markup=kb_sign_up)


@dp.callback_query_handler(text='callback_installation_yes', state=Mydialog.state_sign_up_name)
async def callback_installation_yes(callback: types.callback_query, state: FSMContext):
    await state.finish()
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, '<b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ'
                                                  ' 79XXXXXXXXX</b>', parse_mode='HTML',
                           reply_markup=kb_sign_up_only_back_num)
    await Mydialog.state_sign_up_mobile_number.set()


@dp.message_handler(state=Mydialog.state_sign_up_mobile_number)
async def callback_installation_state(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
        user_message = data['text']
        (await update_number_phone_users(user_message, message.from_user.id))
        await Mydialog.state_sign_up_mobile_number.set()
        await bot.send_message(message.from_user.id, f"<b>–≠—Ç–æ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> "
                                                     f"{user_message}?", parse_mode='HTML', reply_markup=kb_sign_up_num)


@dp.callback_query_handler(text='callback_sign_up_installation_num_yes', state=Mydialog.state_sign_up_mobile_number)
async def callback_installation_yes(callback: types.callback_query, state: FSMContext):
    await state.finish()
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    btn_resend_users = InlineKeyboardButton(text='–ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å',
                                            url=f'http://onmap.uz/tel/'
                                                f'{(await get_users_number_phone(callback.from_user.id))}')
    kb_admin_install = InlineKeyboardMarkup()
    kb_admin_install.add(btn_resend_users)
    await bot.send_message((await get_admin_users_with_role('installation')),
                           f'<b>{(await get_users_name(callback.from_user.id))}'
                           f' –∑–∞–ø–∏—Å–∞–ª—Å—è(–ª–∞—Å—å) –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∞–∫—É—Å—Ç–∏–∫–∏.\n\n'
                           f'–ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç–µ –µ–º—É(–µ–π) –ø–æ –Ω–æ–º–µ—Ä—É</b> {(await get_users_number_phone(callback.from_user.id))}',
                           reply_markup=kb_admin_install, parse_mode='HTML')
    await bot.send_message(callback.from_user.id, f'<b>–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∞–∫—É—Å—Ç–∏–∫–∏.'
                                                  f' –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω—è—Ç –ø–æ —É–∫–∞–∑–∞–Ω–æ–º—É –≤–∞–º–∏ –Ω–æ–º–µ—Ä—É </b>'
                                                  f'{(await get_users_number_phone(callback.from_user.id))}'
                                                  f' <b>–¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏</b>'
                           , parse_mode='HTML',
                           reply_markup=kb_sign_up_back_to_servis)


@dp.callback_query_handler(text='callback_sign_up_installation_num_no', state=Mydialog.state_sign_up_mobile_number)
async def callback_installation_yes(callback: types.callback_query, state: FSMContext):
    await state.finish()
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, '<b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ'
                                                  ' 79XXXXXXXXX</b>', parse_mode='HTML',
                           reply_markup=kb_sign_up_only_back_num)
    await Mydialog.state_sign_up_mobile_number.set()


@dp.callback_query_handler(text='callback_sign_up_back_num', state=Mydialog.state_sign_up_mobile_number)
async def callback_sign_up_back_(callback: types.callback_query, state: FSMContext):
    await state.finish()
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, '<b>–í—ã–±–µ—Ä–µ—Ç–µ –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è</b>', parse_mode='HTML',
                           reply_markup=kb_sign_up)


# //////////////////////////////////////////////////////////////////////////////////////////////////////////////
@dp.callback_query_handler(text='callback_car_service')
async def callback_car(callback: types.callback_query):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, '<b>–£–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è</b>', parse_mode='HTML',
                           reply_markup=kb_sign_up_only_back)
    await Mydialog.state_sign_up_name_car_service.set()


@dp.callback_query_handler(text='callback_sign_up_back', state=Mydialog.state_sign_up_name_car_service)
async def callback_sign_up_back(callback: types.callback_query, state: FSMContext):
    await state.finish()
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, '<b>–í—ã–±–µ—Ä–µ—Ç–µ –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è</b>', parse_mode='HTML',
                           reply_markup=kb_sign_up)


@dp.message_handler(state=Mydialog.state_sign_up_name_car_service)
async def callback_car_state(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
        user_message = data['text']
        (await update_name_users(user_message, message.from_user.id))
        await Mydialog.state_sign_up_name_car_service.set()
        await bot.send_message(message.from_user.id, f"<b>–í–∞—Å –∑–æ–≤—É—Ç</b> "
                                                     f"{user_message}?", parse_mode='HTML',
                               reply_markup=kb_sign_up_name_car_service)


@dp.callback_query_handler(text='callback_car_service_no', state=Mydialog.state_sign_up_name_car_service)
async def callback_car_no(callback: types.callback_query, state: FSMContext):
    await state.finish()
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, '<b>–£–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è</b>', parse_mode='HTML',
                           reply_markup=kb_sign_up_only_back)
    await Mydialog.state_sign_up_name_car_service.set()


# ok

@dp.callback_query_handler(text='callback_car_service_yes', state=Mydialog.state_sign_up_name_car_service)
async def callback_car_yes(callback: types.callback_query, state: FSMContext):
    await state.finish()
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, '<b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ'
                                                  ' 79XXXXXXXXX</b>', parse_mode='HTML',
                           reply_markup=kb_sign_up_only_back_num)
    await Mydialog.state_sign_up_mobile_number_car_service.set()


@dp.message_handler(state=Mydialog.state_sign_up_mobile_number_car_service)
async def callback_car_state(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
        user_message = data['text']
        (await update_number_phone_users(user_message, message.from_user.id))
        await Mydialog.state_sign_up_mobile_number_car_service.set()
        await bot.send_message(message.from_user.id, f"<b>–≠—Ç–æ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> "
                                                     f"{user_message}?", parse_mode='HTML', reply_markup=kb_sign_up_num)


@dp.callback_query_handler(text='callback_sign_up_installation_num_yes',
                           state=Mydialog.state_sign_up_mobile_number_car_service)
async def callback_installation_yes(callback: types.callback_query, state: FSMContext):
    await state.finish()
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    btn_resend_users = InlineKeyboardButton(text='–ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å',
                                            url=f'http://onmap.uz/tel/'
                                                f'{(await get_users_number_phone(callback.from_user.id))}')
    kb_admin_install = InlineKeyboardMarkup()
    kb_admin_install.add(btn_resend_users)
    await bot.send_message((await get_admin_users_with_role('car_service')),
                           f'<b>{(await get_users_name(callback.from_user.id))} –∑–∞–ø–∏—Å–∞–ª—Å—è(–ª–∞—Å—å) –≤ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å.\n\n'
                           f'–ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç–µ –µ–º—É(–µ–π) –ø–æ –Ω–æ–º–µ—Ä—É</b> {(await get_users_number_phone(callback.from_user.id))}',
                           reply_markup=kb_admin_install, parse_mode='HTML')
    await bot.send_message(callback.from_user.id, f'<b>–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –≤ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å.'
                                                  f' –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω—è—Ç –ø–æ —É–∫–∞–∑–∞–Ω–æ–º—É –≤–∞–º–∏ –Ω–æ–º–µ—Ä—É </b>'
                                                  f'{(await get_users_number_phone(callback.from_user.id))}'
                                                  f' <b>–¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏</b>'
                           , parse_mode='HTML',
                           reply_markup=kb_sign_up_back_to_servis)


@dp.callback_query_handler(text='callback_sign_up_installation_num_no',
                           state=Mydialog.state_sign_up_mobile_number_car_service)
async def callback_installation_yes(callback: types.callback_query, state: FSMContext):
    await state.finish()
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, '<b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ'
                                                  ' 79XXXXXXXXX</b>', parse_mode='HTML',
                           reply_markup=kb_sign_up_only_back_num)
    await Mydialog.state_sign_up_mobile_number_car_service.set()


@dp.callback_query_handler(text='callback_sign_up_back_num', state=Mydialog.state_sign_up_mobile_number_car_service)
async def callback_sign_up_back_(callback: types.callback_query, state: FSMContext):
    await state.finish()
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, '<b>–í—ã–±–µ—Ä–µ—Ç–µ –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è</b>', parse_mode='HTML',
                           reply_markup=kb_sign_up)


if __name__ == '__main__':
    executor.start_polling(dp)
